# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# Duplicate paths and cycles through foaf:knows*
# 
# /Users/ben/Repos/datagraph/tests/tests/sparql11-tests/data-sparql11/property-path/pp14.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#pp16
#
# This test is approved: 
# 
#
describe "W3C test" do
  context "property-path" do
    before :all do
      @data = %q{
@prefix : <http://example.org/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

:a foaf:knows :b .
:b foaf:knows :c .
:a foaf:knows :c .
:d foaf:knows :e .
:e foaf:knows :f .
:f foaf:knows :e .
:f foaf:name "test" .
:a foaf:homepage :h .


}
      @query = %q{
PREFIX : <http://example.org/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT *
WHERE { ?X foaf:knows* ?Y } 
ORDER BY ?X ?Y



}
    end

    example "Duplicate paths and cycles through foaf:knows*", :unverified => true, :w3c_status => 'unapproved' do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'property-path-pp16'
      expected = [
          { 
              :X => RDF::URI('http://example.org/a'),
              :Y => RDF::URI('http://example.org/a'),
          },
          { 
              :X => RDF::URI('http://example.org/a'),
              :Y => RDF::URI('http://example.org/b'),
          },
          { 
              :X => RDF::URI('http://example.org/a'),
              :Y => RDF::URI('http://example.org/c'),
          },
          { 
              :X => RDF::URI('http://example.org/a'),
              :Y => RDF::URI('http://example.org/c'),
          },
          { 
              :X => RDF::URI('http://example.org/b'),
              :Y => RDF::URI('http://example.org/b'),
          },
          { 
              :X => RDF::URI('http://example.org/b'),
              :Y => RDF::URI('http://example.org/c'),
          },
          { 
              :X => RDF::URI('http://example.org/c'),
              :Y => RDF::URI('http://example.org/c'),
          },
          { 
              :X => RDF::URI('http://example.org/d'),
              :Y => RDF::URI('http://example.org/d'),
          },
          { 
              :X => RDF::URI('http://example.org/d'),
              :Y => RDF::URI('http://example.org/e'),
          },
          { 
              :X => RDF::URI('http://example.org/d'),
              :Y => RDF::URI('http://example.org/e'),
          },
          { 
              :X => RDF::URI('http://example.org/d'),
              :Y => RDF::URI('http://example.org/f'),
          },
          { 
              :X => RDF::URI('http://example.org/e'),
              :Y => RDF::URI('http://example.org/e'),
          },
          { 
              :X => RDF::URI('http://example.org/e'),
              :Y => RDF::URI('http://example.org/e'),
          },
          { 
              :X => RDF::URI('http://example.org/e'),
              :Y => RDF::URI('http://example.org/f'),
          },
          { 
              :X => RDF::URI('http://example.org/f'),
              :Y => RDF::URI('http://example.org/e'),
          },
          { 
              :X => RDF::URI('http://example.org/f'),
              :Y => RDF::URI('http://example.org/f'),
          },
          { 
              :X => RDF::URI('http://example.org/f'),
              :Y => RDF::URI('http://example.org/f'),
          },
          { 
              :X => RDF::URI('http://example.org/h'),
              :Y => RDF::URI('http://example.org/h'),
          },
          { 
              :X => RDF::Literal.new('test' ),
              :Y => RDF::Literal.new('test' ),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
