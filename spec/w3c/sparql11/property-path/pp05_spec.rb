# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# Zero length path
# 
# /Users/ben/Repos/datagraph/tests/tests/sparql11-tests/data-sparql11/property-path/pp05.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#pp05
#
# This test is approved: 
# 
#
describe "W3C test" do
  context "property-path" do
    before :all do
      @data = %q{
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix ex:	<http://www.example.org/schema#>.
@prefix in:	<http://www.example.org/instance#>.

_:b1 rdf:first 1 .
_:b1 rdf:rest rdf:nil .

_:b2 ex:prop 2 .





}
      @query = %q{
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix ex:	<http://www.example.org/schema#>
prefix in:	<http://www.example.org/instance#>

select * where {
?x rdf:rest{0,1} ?y
}

}
    end

    example "Zero length path", :unverified => true, :w3c_status => 'unapproved' do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'property-path-pp05'
      expected = [
          { 
              :x => RDF::Literal.new('1' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
              :y => RDF::Literal.new('1' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :x => RDF::Literal.new('2' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
              :y => RDF::Literal.new('2' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :x => RDF::URI('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'),
              :y => RDF::URI('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'),
          },
          { 
              :x => RDF::Node.new('b0'),
              :y => RDF::Node.new('b0'),
          },
          { 
              :x => RDF::Node.new('b0'),
              :y => RDF::URI('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'),
          },
          { 
              :x => RDF::Node.new('b1'),
              :y => RDF::Node.new('b1'),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
