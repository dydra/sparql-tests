# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# YEAR()
# 
# /Users/ben/Repos/datagraph/tests/tests/sparql11-tests/data-sparql11/functions/year-01.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#year
#
# This test is approved: 
# 
# 20110208 jaa : tz zulu for time canonicalization

describe "W3C test" do
  context "functions" do
    before :all do
      @data = %q{
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix : <http://example.org/> .

# numeric data
:n4 :num -2 .
:n1 :num -1 .
:n2 :num -1.6 .
:n3 :num 1.1 .
:n5 :num 2.5 .

# string data
:s1 :str "foo" .
:s2 :str "bar"@en .
:s3 :str "BAZ" .
:s4 :str "食べ物" .
:s5 :str "100%" .
:s6 :str "abc"^^xsd:string .
:s7 :str "DEF"^^xsd:string .

# date data
:d1 :date "2010-06-21T11:28:01Z"^^xsd:dateTime .
:d2 :date "2010-12-21T15:38:02-08:00"^^xsd:dateTime .
:d3 :date "2008-06-20T23:59:00Z"^^xsd:dateTime .
:d4 :date "2011-02-01T01:02:03"^^xsd:dateTime .

:d5a :date "2011-01-01T01:02:03-02:00"^^xsd:dateTime .
:d5b :date "2011-01-01T01:02:03+00:00"^^xsd:dateTime .
:d5c :date "2011-01-01T01:02:03+02:00"^^xsd:dateTime .

:d6a :date "2011-12-31T23:24:25-02:00"^^xsd:dateTime .
:d6b :date "2011-12-31T23:24:25+00:00"^^xsd:dateTime .
:d6c :date "2011-12-31T23:24:25+02:00"^^xsd:dateTime .

}
      @query = %q{
PREFIX : <http://example.org/>
SELECT ?s (YEAR(?date) AS ?x) WHERE {
	?s :date ?date
}

}
    end

    example "YEAR(zulu)", :tz => 'zulu', :w3c_status => 'unapproved' do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'functions-year-zulu'
      expected = [
          { 
              :s => RDF::URI('http://example.org/d1'),
              :x => RDF::Literal.new('2010' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d2'),
              :x => RDF::Literal.new('2010' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d3'),
              :x => RDF::Literal.new('2008' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d4'),
              :x => RDF::Literal.new('2011' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d5a'),
              :x => RDF::Literal.new('2011' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d5b'),
              :x => RDF::Literal.new('2011' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d5c'),
              :x => RDF::Literal.new('2010' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d6a'),
              :x => RDF::Literal.new('2012' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d6b'),
              :x => RDF::Literal.new('2011' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
          { 
              :s => RDF::URI('http://example.org/d6c'),
              :x => RDF::Literal.new('2011' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
