# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# INSERT USING 01
# This is an INSERT into the default graph of two triples constructed from the data in two named graphs that are treated as the default graph during matching with the USING keyword.
# /Users/ben/Repos/dydra/tests/tests/sparql11-tests/data-sparql11/basic-update/insert-using-01.ru
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#insert-using-01
#
# This test is approved: 
# 
#
describe "W3C test" do
  context "basic-update" do
    before :all do
      @data = %q{
@prefix : <http://example.org/> .

:a :b :c .

}
       # http://example.org/g1
       @graph0 = %q{
@prefix : <http://example.org/> .

:g1 :p "y" .

}
       # http://example.org/g2
       @graph1 = %q{
@prefix : <http://example.org/> .

:g2 :p "z" .

}
      @query = %q{
PREFIX     : <http://example.org/> 

INSERT {
	?s ?p "q"
}
USING :g1
USING :g2
WHERE {
	?s ?p ?o
}

}
    end

    example "INSERT USING 01", :status => 'unverified', :w3c_status => 'unapproved' do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}

      graphs[RDF::URI('http://example.org/g1')] = { :data => @graph0, :format => :ttl }
      graphs[RDF::URI('http://example.org/g2')] = { :data => @graph1, :format => :ttl }

      repository = 'basic-update-insert-using-01'
      expected = [
          {
            :s => RDF::URI('http://example.org/a'),
            :p => RDF::URI('http://example.org/b'),
            :o => RDF::URI('http://example.org/c'),
            :g => nil
          },
          {
            :s => RDF::URI('http://example.org/g1'),
            :p => RDF::URI('http://example.org/p'),
            :o => RDF::Literal.new('q' ),
            :g => nil
          },
          {
            :s => RDF::URI('http://example.org/g2'),
            :p => RDF::URI('http://example.org/p'),
            :o => RDF::Literal.new('q' ),
            :g => nil
          },
          {
            :s => RDF::URI('http://example.org/g1'),
            :p => RDF::URI('http://example.org/p'),
            :o => RDF::Literal.new('y' ),
            :g => RDF::URI('http://example.org/g1')
          },
          {
            :s => RDF::URI('http://example.org/g2'),
            :p => RDF::URI('http://example.org/p'),
            :o => RDF::Literal.new('z' ),
            :g => RDF::URI('http://example.org/g2')
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :update).should =~ expected
    end
  end
end
