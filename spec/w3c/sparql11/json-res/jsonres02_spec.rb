# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# jsonres02 - JSON Result Format
# SELECT with OPTIONAL (i.e. not all vars bound in all results)
# /Users/ben/Repos/dydra/tests/tests/sparql11-tests/data-sparql11/json-res/jsonres02.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#jsonres02
#
# This test is approved: 
# 
#
describe "W3C test" do
  context "json-res" do
    before :all do
      @data = %q{
@prefix : <http://example.org/> .

:s1 :p1 :s2 .
:s2 :p2 "foo" .
:s3 :p3 _:b .
:s4 :p4 4 .

}
      @query = %q{
PREFIX : <http://example.org/>

SELECT * WHERE { ?s ?p ?o OPTIONAL {?o ?p2 ?o2 } } ORDER BY ?s ?p ?o ?p2 ?o2
}
    end

    example "jsonres02 - JSON Result Format", :status => 'unverified', :w3c_status => 'unapproved' do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'json-res-jsonres02'
      expected = [
          { 
              :o => RDF::URI('http://example.org/s2'),
              :o2 => RDF::Literal.new('foo' ),
              :p => RDF::URI('http://example.org/p1'),
              :p2 => RDF::URI('http://example.org/p2'),
              :s => RDF::URI('http://example.org/s1'),
          },
          { 
              :o => RDF::Literal.new('foo' ),
              :p => RDF::URI('http://example.org/p2'),
              :s => RDF::URI('http://example.org/s2'),
          },
          { 
              :o => RDF::Node.new('b0'),
              :p => RDF::URI('http://example.org/p3'),
              :s => RDF::URI('http://example.org/s3'),
          },
          { 
              :o => RDF::Literal.new('4' , :datatype => RDF::URI('http://www.w3.org/2001/XMLSchema#integer')),
              :p => RDF::URI('http://example.org/p4'),
              :s => RDF::URI('http://example.org/s4'),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
