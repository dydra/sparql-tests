# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# Complex optional semantics: 1
# Complex optional: LeftJoin(LeftJoin(BGP(..),{..}),Join(BGP(..),Union(..,..)))
# /Users/ben/repos/datagraph/tests/tests/data-r2/optional/q-opt-complex-1.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#dawg-optional-complex-1
#
# This test is approved: 
# http://lists.w3.org/Archives/Public/public-rdf-dawg/2007JulSep/att-0096/21-dawg-minutes.html
#
# 20101218 jaa : bug : the solution field requires a place-holder for unbound variables
# 20101219 jaa : unbound marker now supported

describe "W3C test" do
  context "optional" do
    before :all do
      @data = %q{
@prefix foaf:       <http://xmlns.com/foaf/0.1/> .

<tag:alice@example:foafUri> 
    foaf:mbox   <mailto:alice@example.net>;
    foaf:name   "Alice";
    foaf:nick   "WhoMe?";
    foaf:depiction   <http://example.com/alice.png> .

<tag:bert@example:foafUri> 
    foaf:mbox   <mailto:bert@example.net> ;
    foaf:nick   "BigB" ;
    foaf:name   "Bert" .

<tag:eve@example:foafUri> 
    foaf:mbox   <mailto:eve@example.net> ;
    foaf:firstName   "Eve" .

<tag:john@example:foafUri>
    foaf:mbox   <mailto:john@example.net> ;
    foaf:nick   "jDoe";
    foaf:isPrimaryTopicOf <http://example.com/people/johnDoe> .

}
      @query = %q{
        (prefix ((foaf: <http://xmlns.com/foaf/0.1/>))
          (project (?person ?nick ?page ?img ?name ?firstN)
            (filter (|| (|| (bound ?page) (bound ?img)) (bound ?firstN))
              (leftjoin
                (leftjoin
                  (bgp (triple ?person foaf:nick ?nick))
                  (bgp (triple ?person foaf:isPrimaryTopicOf ?page)))
                (join
                  (bgp (triple ?person foaf:name ?name))
                  (union
                    (bgp (triple ?person foaf:depiction ?img))
                    (bgp (triple ?person foaf:firstName ?firstN))))))))
}
    end

    example "Complex optional semantics: 1" do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'optional-dawg-optional-complex-1'
      expected = [
          { 
              :img => RDF::URI('http://example.com/alice.png'),
              :name => RDF::Literal.new('Alice' ),
              :nick => RDF::Literal.new('WhoMe?' ),
              :person => RDF::URI('tag:alice@example:foafUri'),
          },
          { 
              :nick => RDF::Literal.new('jDoe' ),
              :page => RDF::URI('http://example.com/people/johnDoe'),
              :person => RDF::URI('tag:john@example:foafUri'),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
