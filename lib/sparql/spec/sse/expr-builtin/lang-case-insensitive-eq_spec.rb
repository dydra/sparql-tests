# coding: utf-8
#
require 'spec_helper'

# Auto-generated by build_w3c_tests.rb
#
# lang-case-insensitive-eq
# 'xyz'@en = 'xyz'@EN
# /Users/ben/repos/datagraph/tests/tests/data-r2/expr-builtin/lang-case-sensitivity-eq.rq
#
# This is a W3C test from the DAWG test suite:
# http://www.w3.org/2001/sw/DataAccess/tests/r2#lang-case-insensitive-eq
#
# This test is approved: 
# http://www.w3.org/2007/06/19-dawg-minutes.html
#
describe "W3C test" do
  context "expr-builtin" do
    before :all do
      @data = %q{
# Data: minimal test of plain literal language sensitivity
# $Id: lang-case-sensitivity.ttl,v 1.1 2007/06/24 23:15:38 lfeigenb Exp $

@prefix     : <http://example/> .

:x2 :p "xyz"@en .
:x3 :p "xyz"@EN .

}
      @query = %q{
        (prefix ((: <http://example/>))
          (filter (= ?v1 ?v2)
            (bgp
              (triple ?x1 :p ?v1)
              (triple ?x2 :p ?v2)
            )))
}
    end

    example "lang-case-insensitive-eq" do
    
      graphs = {}
      graphs[:default] = { :data => @data, :format => :ttl}


      repository = 'expr-builtin-lang-case-insensitive-eq'
      expected = [
          { 
              :v1 => RDF::Literal.new('xyz', :language => 'en' ),
              :v2 => RDF::Literal.new('xyz', :language => 'en' ),
              :x1 => RDF::URI('http://example/x2'),
              :x2 => RDF::URI('http://example/x2'),
          },
          { 
              :v1 => RDF::Literal.new('xyz', :language => 'en' ),
              :v2 => RDF::Literal.new('xyz', :language => 'EN' ),
              :x1 => RDF::URI('http://example/x2'),
              :x2 => RDF::URI('http://example/x3'),
          },
          { 
              :v1 => RDF::Literal.new('xyz', :language => 'EN' ),
              :v2 => RDF::Literal.new('xyz', :language => 'en' ),
              :x1 => RDF::URI('http://example/x3'),
              :x2 => RDF::URI('http://example/x2'),
          },
          { 
              :v1 => RDF::Literal.new('xyz', :language => 'EN' ),
              :v2 => RDF::Literal.new('xyz', :language => 'EN' ),
              :x1 => RDF::URI('http://example/x3'),
              :x2 => RDF::URI('http://example/x3'),
          },
      ]


      sparql_query(:graphs => graphs, :query => @query,       # unordered comparison in rspec is =~
                   :repository => repository, :form => :select).should =~ expected
    end
  end
end
