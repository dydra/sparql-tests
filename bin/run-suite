#! /bin/sh

# run-suite [ <ROOT-PATHNAME> ]
#
# run all test suites which are visible from the given root, or if none is specified, from the working directory.
#
# visibility is determined by the presence of a '.rq' query file in a directory. when that is true, 
# - the setup-repository script runs for each rdf document in the respective directory. this
#   uses the respective filename stem, ensures that a repository exits of that name with that content.
# - the run-query script runs for the query file. the output is captures and compared byte-wise with the expected
#   result. success requires identity.
#
# a test suite run returns 0 for success, otherwise the count of failures


if [ "$DYDRA_ACCOUNT" = "" ]
then
  echo "no value present for DYDRA_ACCOUNT"
  exit 
fi

export TEST_LIBRARY=`dirname \`readlink -f .\``

source ${TEST_LIBARAY}/setup-script

if [ "$1" != "" ]
then
  ROOT="$1"
else
  ROOT=.
fi

# count externally to cope with shell's incapacity
cat /dev/null > tests-failed
cat /dev/null > tests-succeeded

# for each .sh present, run a test in the respective directory
find $ROOT -name '*.sh' | while read TEST_SCRIPT; do
 pushd `dirname $TEST_SCRIPT`
 bash $MODE_QUIET $MODE_VERBOSE $MODE_CREATE $TEST_SCRIPT ;
 RESULT=$?

 if [ $RESULT == 0 ]
 then
   echo $TEST_SCRIPT >> tests-succeeded
   if [ "$MODE_VERBOSE" ]
   then
     echo "$TEST_SCRIPT succeeded"
   elif [ ! "$MODE_QUIET" ]
   then
     echo -n "+"
   fi
  else
    echo $TEST_SCRIPT >> tests-failed 
    if [ "$MODE_VERBOSE" ]
    then
      echo "$TEST_SCRIPT failed"
    elif [ ! "$MODE_QUIET" ]
    then
      echo -n "-"
    fi
  fi
  popd
done

FAILED=(`wc -l tests-failed`)
SUCCEEDED=(`wc -l tests-succeeded`)
if [ ! "$MODE_QUIET" ]
then
  echo " succeeded ${SUCCEEDED[0]}, failed ${FAILED[0]}"
fi

exit ${FAILED[0]}

#
# in order to use this with w3c suites, they need to be arranged in the proper way as those quites
# lack one directory level, and place all queries together with shared input datasets and result
# documents in a single directory. the steps to rearrange a w3c suite are
# - start with the manifest
# - for manifest create a directory for the  topic label
# - for each entry in  the manifest, create a sub-directory for the entry's name.
#   use the action and result aspects to generate the directory content
# -- copy the query to that directory
# -- copy any data to the directory - renaming it to correspond to the test
# -- copy the result file - if it is xml, c14n ir and renaming to expected.srx. if it is 
#    json, just rename it
#! should change the test script to use any srx/srj file present
