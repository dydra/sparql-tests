#! /bin/sh

# run-suite [ <ROOT-PATHNAME> ]
#
# run all test suites which are visible from the given root, or if none is specified, from the working directory.
#
# visibility is determined by the presence of a '.rq' query file in a directory. when that is true, 
# - the setup-repository script runs for each rdf document in the respective directory. this
#   uses the respective filename stem, ensures that a repository exits of that name with that content.
# - the run-query script runs for the query file. the output is captures and compared byte-wise with the expected
#   result. success requires identity.
#
# a test suite run returns 0 for success, otherwise the count of failures


if [ "$DYDRA_ACCOUNT" = "" ]
then
  echo "no value present for DYDRA_ACCOUNT"
  exit 
fi

TEMP=`getopt -o "cqv" -- "$@"`
eval set -- "$TEMP"
while true; do
  case "$1" in
    -c) MODE_CREATE="-c"; shift;;
    -q) MODE_QUIET="-q"; shift ;;
    -v) MODE_VERBOSE="-v"; shift ;;
    --) shift; break;;
    *)
      echo >&2 "usage: $0 [-q] [-v]"
      exit 1;;
  esac
done

if [ "$1" != "" ]
then
  ROOT="$1"
else
  ROOT=.
fi

# count externally to cope with shell's incapacity
cat /dev/null > tests-failed
cat /dev/null > tests-succeeded

# for each query.rq present, run a test in the respective directory
find $ROOT -name '*.rq' | while read QUERY; do run-test $MODE_QUIET $MODE_VERBOSE $MODE_CREATE $QUERY ; done

FAILED=(`wc -l tests-failed`)
SUCCEEDED=(`wc -l tests-succeeded`)
if [ ! "$MODE_QUIET" ]
then
  echo " succeeded ${SUCCEEDED[0]}, failed ${FAILED[0]}"
fi

exit $FAILED 

#
# in order to use this with w3c suites, they need to be arranged in the proper way as those quites
# lack one directory level, and place all queries together with shared input datasets and result
# documents in a single directory. the steps to rearrange a w3c suite are
# - start with the manifest
# - for manifest create a directory for the  topic label
# - for each entry in  the manifest, create a sub-directory for the entry's name.
#   use the action and result aspects to generate the directory content
# -- copy the query to that directory
# -- copy any data to the directory - renaming it to correspond to the test
# -- copy the result file - if it is xml, c14n ir and renaming to expected.srx. if it is 
#    json, just rename it
#! should change the test script to use any srx/srj file present
